"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateActionMarkdownDocs = exports.defaultOptions = void 0;
const linebreak_1 = require("./linebreak");
const js_yaml_1 = require("js-yaml");
const fs_1 = require("fs");
const replace_in_file_1 = __importDefault(require("replace-in-file"));
exports.defaultOptions = {
    tocLevel: 2,
    actionFile: "action.yml",
    updateReadme: false,
    readmeFile: "README.md",
    lineBreaks: "LF",
};
function createMdTable(data, options, type) {
    const tableData = getInputOutput(data, type);
    const tableArray = tableData.headers.concat(tableData.rows);
    let result = "";
    for (const line of tableArray) {
        result = `${result}|`;
        for (const c of line) {
            result = `${result} ${c.replace(/(\r\n|\n|\r)/gm, " ")} |`;
        }
        result = `${result}${(0, linebreak_1.getLineBreak)(options.lineBreaks)}`;
    }
    return result;
}
function getToc(tocLevel) {
    let result = "";
    for (let i = 0; i < tocLevel; i++) {
        result = `${result}#`;
    }
    return result;
}
function generateActionMarkdownDocs(inputOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        const options = Object.assign(Object.assign({}, exports.defaultOptions), inputOptions);
        const docs = generateActionDocs(options);
        if (options.updateReadme) {
            yield updateReadme(options, docs.description, "description");
            yield updateReadme(options, docs.inputs, "inputs");
            yield updateReadme(options, docs.outputs, "outputs");
            yield updateReadme(options, docs.runs, "runs");
        }
        return `${docs.description + docs.inputs + docs.outputs + docs.runs}`;
    });
}
exports.generateActionMarkdownDocs = generateActionMarkdownDocs;
function generateActionDocs(options) {
    const yml = (0, js_yaml_1.load)((0, fs_1.readFileSync)(options.actionFile, "utf-8"), {
        json: true,
    });
    const inputMdTable = createMdTable(yml.inputs, options, "input");
    const outputMdTable = createMdTable(yml.outputs, options, "output");
    return {
        description: createMarkdownSection(options, yml.description, "Description"),
        inputs: createMarkdownSection(options, inputMdTable, "Inputs"),
        outputs: createMarkdownSection(options, outputMdTable, "Outputs"),
        runs: createMarkdownSection(options, 
        // eslint-disable-next-line i18n-text/no-en
        `This action is a \`${yml.runs.using}\` action.`, "Runs"),
    };
}
function updateReadme(options, text, section) {
    return __awaiter(this, void 0, void 0, function* () {
        const to = new RegExp(`<!-- action-docs-${section} -->(?:(?:\r\n|\r|\n.*)+<!-- action-docs-${section} -->)?`);
        yield replace_in_file_1.default.replaceInFile({
            files: options.readmeFile,
            from: to,
            to: `<!-- action-docs-${section} -->${(0, linebreak_1.getLineBreak)(options.lineBreaks)}${text.trim()}${(0, linebreak_1.getLineBreak)(options.lineBreaks)}<!-- action-docs-${section} -->`,
        });
    });
}
function createMarkdownSection(options, data, header) {
    return data !== ""
        ? `${getToc(options.tocLevel)} ${header}${(0, linebreak_1.getLineBreak)(options.lineBreaks)}${(0, linebreak_1.getLineBreak)(options.lineBreaks)}${data}${(0, linebreak_1.getLineBreak)(options.lineBreaks)}${(0, linebreak_1.getLineBreak)(options.lineBreaks)}`
        : "";
}
function getInputOutput(data, type) {
    const headers = [];
    const rows = [];
    if (data === undefined) {
        return { headers, rows };
    }
    headers[0] =
        type === "input"
            ? ["parameter", "description", "required", "default"]
            : ["parameter", "description"];
    headers[1] = Array(headers[0].length).fill("---");
    for (let i = 0; i < Object.keys(data).length; i++) {
        const key = Object.keys(data)[i];
        const value = data[key];
        rows[i] = [];
        rows[i].push(key);
        rows[i].push(value.description);
        if (type === "input") {
            rows[i].push(value.required ? `\`${String(value.required)}\`` : "`false`");
            if (value.default !== undefined) {
                rows[i].push(value.default.toString().replace(/\r\n|\r|\n/g, " "));
            }
            else {
                rows[i].push("");
            }
        }
    }
    return { headers, rows };
}
